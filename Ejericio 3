import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class KruskalWithCycleCount {

    // Clase para representar una arista ponderada
    static class Edge implements Comparable<Edge> {
        int source;
        int destination;
        int weight;

        public Edge(int source, int destination, int weight) {
            this.source = source;
            this.destination = destination;
            this.weight = weight;
        }

        // Para ordenar las aristas por peso
        @Override
        public int compareTo(Edge other) {
            return this.weight - other.weight;
        }
    }

    // Clase para la estructura de datos Union-Find
    static class UnionFind {
        private int[] parent;

        public UnionFind(int n) {
            parent = new int[n];
            for (int i = 0; i < n; i++) {
                parent[i] = i; // Cada vértice es su propio padre al inicio
            }
        }

        // Encuentra el representante (raíz) del conjunto de un elemento
        public int find(int i) {
            if (parent[i] == i) {
                return i;
            }
            // Compresión de ruta para optimización
            return parent[i] = find(parent[i]);
        }

        // Une dos conjuntos. Devuelve false si ya estaban unidos (ciclo), true si no.
        public boolean union(int i, int j) {
            int rootI = find(i);
            int rootJ = find(j);

            if (rootI != rootJ) {
                parent[rootI] = rootJ;
                return true; // Unión exitosa, no se forma un ciclo
            } else {
                return false; // Ya estaban en el mismo conjunto, se formaría un ciclo
            }
        }
    }

    private final int vertices;
    private final List<Edge> edges;

    public KruskalWithCycleCount(int vertices) {
        this.vertices = vertices;
        this.edges = new ArrayList<>();
    }

    public void addEdge(int source, int destination, int weight) {
        edges.add(new Edge(source, destination, weight));
    }

    /**
     * Implementa el algoritmo de Kruskal y cuenta los ciclos evitados.
     */
    public void findMst() {
        // Ordena todas las aristas del grafo por peso
        Collections.sort(edges);

        UnionFind uf = new UnionFind(vertices);
        List<Edge> mst = new ArrayList<>();
        int cyclesAvoided = 0;

        for (Edge edge : edges) {
            // Intenta unir los conjuntos de los dos vértices de la arista
            if (uf.union(edge.source, edge.destination)) {
                // Si la unión es exitosa (no hay ciclo), se añade la arista al MST
                mst.add(edge);
            } else {
                // Si la unión falla, es porque se hubiera formado un ciclo
                cyclesAvoided++;
            }

            // El MST está completo cuando tiene V-1 aristas
            if (mst.size() == vertices - 1) {
                break;
            }
        }

        // Imprimir los resultados
        printResult(mst, cyclesAvoided);
    }
    
    private void printResult(List<Edge> mst, int cyclesAvoided) {
        System.out.println("Aristas del Árbol de Expansión Mínima (MST):");
        System.out.println("Arista \tPeso");
        int totalCost = 0;
        for (Edge edge : mst) {
            System.out.println(edge.source + " - " + edge.destination + "\t" + edge.weight);
            totalCost += edge.weight;
        }
        System.out.println("----------------------------------------");
        System.out.println("Costo total del MST: " + totalCost);
        System.out.println("✅ Ciclos evitados durante el proceso: " + cyclesAvoided);
    }

    public static void main(String[] args) {
        int V = 6; // 6 vértices
        KruskalWithCycleCount graph = new KruskalWithCycleCount(V);

        // Añadimos aristas al grafo
        graph.addEdge(0, 1, 4);
        graph.addEdge(0, 2, 3);
        graph.addEdge(1, 2, 1); // Esta arista creará un ciclo con 0-1 y 0-2 si se procesa tarde
        graph.addEdge(1, 3, 2);
        graph.addEdge(2, 3, 4);
        graph.addEdge(3, 4, 2);
        graph.addEdge(4, 5, 6);
        graph.addEdge(2, 5, 5); // Arista adicional para asegurar más ciclos potenciales

        // Ejecutar el algoritmo
        graph.findMst();
    }
}
