import java.util.*;

public class ShortestPathDijkstra {

    // Clase interna para representar un nodo en la lista de adyacencia
    static class Node implements Comparable<Node> {
        int vertex;
        int weight;

        Node(int vertex, int weight) {
            this.vertex = vertex;
            this.weight = weight;
        }

        // Para que la PriorityQueue ordene por peso
        @Override
        public int compareTo(Node other) {
            return Integer.compare(this.weight, other.weight);
        }
    }

    private final int vertices;
    private final List<List<Node>> adjacencyList;

    public ShortestPathDijkstra(int vertices) {
        this.vertices = vertices;
        adjacencyList = new ArrayList<>(vertices);
        for (int i = 0; i < vertices; i++) {
            adjacencyList.add(new ArrayList<>());
        }
    }

    public void addEdge(int source, int destination, int weight) {
        // Grafo dirigido
        adjacencyList.get(source).add(new Node(destination, weight));
        // Si el grafo fuera no dirigido, añadir también la arista inversa:
        // adjacencyList.get(destination).add(new Node(source, weight));
    }

    /**
     * Encuentra y muestra el camino más corto entre un origen y un destino.
     * @param startVertex El vértice de inicio.
     * @param endVertex   El vértice de destino.
     */
    public void findShortestPath(int startVertex, int endVertex) {
        // PriorityQueue para almacenar los vértices a visitar, ordenados por distancia
        PriorityQueue<Node> pq = new PriorityQueue<>();

        // Array para almacenar las distancias más cortas desde el origen
        int[] distances = new int[vertices];
        Arrays.fill(distances, Integer.MAX_VALUE);

        // Array para reconstruir el camino
        int[] previous = new int[vertices];
        Arrays.fill(previous, -1);

        // La distancia al origen es 0
        distances[startVertex] = 0;
        pq.add(new Node(startVertex, 0));

        while (!pq.isEmpty()) {
            Node currentNode = pq.poll();
            int u = currentNode.vertex;

            // Si ya encontramos un camino más corto a u, lo ignoramos
            if (currentNode.weight > distances[u]) {
                continue;
            }

            // Si llegamos al destino, podemos detenernos (optimización)
            if (u == endVertex) {
                break;
            }

            // Recorremos los vecinos del nodo actual
            for (Node neighbor : adjacencyList.get(u)) {
                int v = neighbor.vertex;
                int weight = neighbor.weight;

                // Si encontramos un camino más corto hacia el vecino
                if (distances[u] + weight < distances[v]) {
                    distances[v] = distances[u] + weight;
                    previous[v] = u;
                    pq.add(new Node(v, distances[v]));
                }
            }
        }

        // Reconstruir y mostrar el resultado
        printPath(startVertex, endVertex, distances, previous);
    }
    
    private void printPath(int start, int end, int[] distances, int[] previous) {
        // Comprobar si se encontró un camino
        if (distances[end] == Integer.MAX_VALUE) {
            System.out.println("No hay ruta posible entre los vértices " + start + " y " + end);
            return;
        }

        // Reconstruir el camino desde el final hacia el inicio
        List<Integer> path = new ArrayList<>();
        for (int at = end; at != -1; at = previous[at]) {
            path.add(at);
        }
        Collections.reverse(path);

        System.out.println("El camino más corto desde " + start + " hasta " + end + " es:");
        for (int i = 0; i < path.size(); i++) {
            System.out.print(path.get(i) + (i == path.size() - 1 ? "" : " -> "));
        }
        System.out.println("\nCosto total del camino: " + distances[end]);
    }

    public static void main(String[] args) {
        int V = 6;
        ShortestPathDijkstra graph = new ShortestPathDijkstra(V);

        // Creación del grafo de ejemplo
        graph.addEdge(0, 1, 4);
        graph.addEdge(0, 2, 2);
        graph.addEdge(1, 3, 5);
        graph.addEdge(2, 1, 1);
        graph.addEdge(2, 3, 8);
        graph.addEdge(2, 4, 10);
        graph.addEdge(3, 4, 2);
        graph.addEdge(3, 5, 6);
        graph.addEdge(4, 5, 3);
        
        // Vértice 5 es inalcanzable desde 1 en este grafo dirigido si se revierte la arista 4->5

        // Interacción con el usuario
        Scanner scanner = new Scanner(System.in);
        System.out.println("Grafo creado con " + V + " vértices (0 a " + (V - 1) + ").");
        
        try {
            System.out.print("Ingresa el vértice de origen: ");
            int start = scanner.nextInt();
            
            System.out.print("Ingresa el vértice de destino: ");
            int end = scanner.nextInt();

            if (start < 0 || start >= V || end < 0 || end >= V) {
                System.out.println("Vértices no válidos. Deben estar entre 0 y " + (V-1) + ".");
            } else {
                graph.findShortestPath(start, end);
            }
        } catch (InputMismatchException e) {
            System.out.println("Entrada no válida. Por favor, ingresa un número entero.");
        } finally {
            scanner.close();
        }
    }
}
